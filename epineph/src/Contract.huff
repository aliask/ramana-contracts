#define event Deposit(address indexed sender, uint256 ETH, uint256 rETH, uint256 stETH)
#define event Drain(address indexed sender, uint256 ETH, uint256 stETH)
#define function deposit(uint256 stETH) payable returns ()
#define function drain() nonpayable returns ()

// Mainnet
#define constant rETH  = 0xae78736Cd615f374D3085123A210448E74Fc6393
#define constant stETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84
#define constant OWNER = 0x956B43bCDB63234605648E14cc275941C5cbEC9E

// Goerli
// #define constant rETH  = 0x178E141a0E3b34152f73Ff610437A7bf9B83267A
// #define constant stETH = 0x1643E812aE58766192Cf7D2Cf9567dF2C37e9B7F
// #define constant OWNER = 0x956B43bCDB63234605648E14cc275941C5cbEC9E

#define constant MAX   = 0xde0b6b3a7640000 // 1 ETH
#define constant SCALE = 0xf4240 // 1 million
#define constant DENOM = 0x1bc16d674ec800000 // 32 * [MAX]

#define macro DEPOSIT() = takes (0) returns (0) {
    0x04 calldataload
    iszero next jumpi
    __FUNC_SIG("transferFrom(address,address,uint256)") push0 mstore
    caller 0x20 mstore address 0x40 mstore 0x20 0x04 0x60 calldatacopy
    0x20 push0 // store result of transferFrom at 0x00
    0x64 0x1c // function signature + three arguments
    push0 [stETH] gas call
    push0 mload and // require no revert & return of true
    next jumpi
    fail:
    push0 push0 revert
    next: // stETH at 0x60
    callvalue 0x60 mload add // total (ETH + stETH)
    dup1 0x40 mstore // total at 0x40 and top of stack
    [MAX] lt fail jumpi // ensure !(MAX < total)
    [DENOM] 0x40 mload basefee [SCALE] mul mul div // fee to subtract from minted rETH
    push0 mstore // store fee at 0x00
    __FUNC_SIG("getRethValue(uint256)") 0x20 mstore
    0x20 0x40 // store rETH at 0x40
    0x24 0x3c // function signature (at 0x20) + one argument
    push0 [rETH] gas call
    iszero fail jumpi
    push0 mload 0x40 mload sub 0x40 mstore // subtract fee
    caller 0x20 mstore
    __FUNC_SIG("transfer(address,uint256)") push0 mstore
    0x20 push0 // store result of transfer at 0x00
    0x44 0x1c // function signature + two arguments
    push0 [rETH] gas call
    iszero fail jumpi
    callvalue 0x20 mstore // store ETH at 0x20
    caller __EVENT_HASH(Deposit)
    0x60 0x20 log2
    push0 push0 return
}

#define macro DUMPSTER() = takes (0) returns (0) {
    __FUNC_SIG("balanceOf(address)") push0 mstore address 0x20 mstore
    0x20 0x40 // store self's stETH balance at 0x40
    0x24 0x1c
    push0 [stETH] gas call
    pop // assume success
    __FUNC_SIG("transfer(address,uint256)") push0 mstore [OWNER] 0x20 mstore
    0x20 push0 // store result of transfer at 0x00
    0x44 0x1c // function signature + two arguments
    push0 [stETH] gas call
    push0 mload and // require no revert & return of true
    here jumpi
    push0 push0 revert
    here:
    selfbalance 0x20 mstore // store self's ETH balance at 0x20
    push0 push0 push0 push0 0x20 mload [OWNER] push0 call // send balance to owner
    caller __EVENT_HASH(Drain)
    0x40 0x20 // 2 words: ETH balance (at 0x20) and stETH balance (at 0x40)
    log2
    push0 push0 return
}

#define macro MAIN() = takes (0) returns (0) {
    push0 calldataload 0xe0 shr
    __FUNC_SIG("drain()") eq into jumpi
    DEPOSIT() into: DUMPSTER()
}
